// <auto-generated />
using System;
using KsiunszkiAPI.Domains;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KsiunszkiAPI.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20200311120203_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KsiunszkiAPI.Domains.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeathPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BirthDate = new DateTime(1564, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Stratford-upon-Avon",
                            DeathDate = new DateTime(1616, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeathPlace = "Stratford-upon-Avon",
                            Name = "William",
                            Surname = "Shakespeare"
                        });
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.AuthorGenre", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AuthorGenre");
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.AuthorWork", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "WorkId");

                    b.HasIndex("WorkId");

                    b.ToTable("AuthorWork");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            WorkId = 1
                        });
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkId");

                    b.ToTable("Works");

                    b.HasData(
                        new
                        {
                            WorkId = 1,
                            Title = "Sen nocy letniej"
                        });
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.WorkGenre", b =>
                {
                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("WorkId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("WorkGenre");
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.AuthorGenre", b =>
                {
                    b.HasOne("KsiunszkiAPI.Domains.Author", "Author")
                        .WithMany("AuthorGenres")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KsiunszkiAPI.Domains.Genre", "Genre")
                        .WithMany("AuthorGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.AuthorWork", b =>
                {
                    b.HasOne("KsiunszkiAPI.Domains.Author", "Author")
                        .WithMany("AuthorWorks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KsiunszkiAPI.Domains.Work", "Work")
                        .WithMany("AuthorWorks")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KsiunszkiAPI.Domains.WorkGenre", b =>
                {
                    b.HasOne("KsiunszkiAPI.Domains.Genre", "Genre")
                        .WithMany("WorkGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KsiunszkiAPI.Domains.Work", "Work")
                        .WithMany("WorkGenres")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
